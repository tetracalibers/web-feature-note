---
import { Icon } from "astro-icon"

// Math.random() * ( 最大値 + 1 - 最小値 ) + 最小値;
const genRandom = (min: number, max: number) => Math.floor(Math.random() * (max + 1 - min) + min)

const width = genRandom(200, 600)
const height = genRandom(200, width)
const category = ["animals", "arch", "nature", "tech"][genRandom(0, 3)]
const title = "タイトル".repeat(genRandom(1, 3))
const text = "この文章はダミーです。".repeat(genRandom(2, 10))
const avatars = [...new Array(genRandom(1, 7))].map(
  _ => `https://i.pravatar.cc/60?img=${genRandom(1, 70)}`,
)
---

<div class="CardWrapper">
  <div class="CardTag">
    <div class="CardTag__text">New</div>
  </div>
  <div class="Card">
    <div class="CardHeader">
      <img
        class="CardHeader__image"
        src={`http://placeimg.com/${width}/${height}/${category}`}
        alt=""
      />
      <h2 class="CardHeader__title">
        {title}
      </h2>
    </div>
    <div class="CardBody">
      <p class="CardBody__paragraph">
        {text}
      </p>
    </div>
    <div class="CardFooter">
      <div class="PublishDate IconText">
        <Icon
          name="clarity:clock-line"
          class="IconText__icon PublishDate__icon"
          aria-hidden="true"
        />
        <time class="IconText__text PublishDate__date" datetime="2022-12-03">2022/12/03</time>
      </div>
      <ul class="Avatars">
        {
          avatars.map(avatar => (
            <li class="Avatar">
              <img class="Avatar__thumb" src={avatar} alt="" loading="lazy" />
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</div>

<style>
  .visually-hidden {
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    height: 1px;
    width: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
  }

  /** CardTagとCardを重ねるためのコンテナ */
  .CardWrapper {
    --card-corner-radius: 10px;
    display: grid;
    border-radius: var(--card-corner-radius);
    cursor: pointer;
    position: relative;
    container-type: inline-size;
  }

  /** hover時に波紋アニメーション */
  .CardWrapper::before {
    content: "";
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    background-color: #aac4ff;
    opacity: 0.1;
    clip-path: circle(0 at center);
    /** blur時はアニメーションせずすぐに消す */
    transition: none;
  }
  .CardWrapper:hover::before {
    clip-path: circle(100% at center);
    /** hover時は0.4sかけて波紋を広げる */
    transition: 0.4s ease-out;
  }

  .CardTag {
    /** Cardと同セルに配置 */
    grid-area: 1 / 1;
    /** Cardの上に重ねる */
    z-index: 1;
    /** 幅はCard幅の20%とし、高さを幅と等しくする */
    width: 20%;
    aspect-ratio: 1;
    background-color: #beb6fa;
    /** 斜めの三角形 */
    clip-path: polygon(0% 0%, 100% 0%, 0% 100%);
    border-top-left-radius: var(--card-corner-radius);
  }

  .CardTag__text {
    width: 129.29%;
    text-align: center;
    /** cos(-45deg)が約-29.29 */
    transform: translate(-29.29%, -100%) rotate(-45deg);
    transform-origin: bottom right;
  }

  .Card {
    box-shadow: rgba(0, 0, 0, 0.15) 0px 5px 15px 0px;
    border-radius: var(--card-corner-radius);
    display: flex;
    flex-direction: column;
    gap: 1em;
    /** CardTagと同セルに配置 */
    grid-area: 1 / 1;
  }

  .CardHeader {
    display: grid;
  }

  /** 同一セルに重ねる */
  .CardHeader__title,
  .CardHeader__image {
    grid-area: 1 / 1;
  }

  .CardHeader__image {
    border-top-left-radius: var(--card-corner-radius);
    border-top-right-radius: var(--card-corner-radius);
    /** レスポンシブ化 */
    width: 100%;
    aspect-ratio: 3 / 2;
    /** 歪まないようにする */
    object-fit: cover;
    /** 中央より25%上の部分を見せる */
    /* object-view-box: inset(-25% 0 0 0); */
    /** グラデーションを挟んでテキストを読みやすく */
    -webkit-mask-image: linear-gradient(to top, #ffffff00 0%, #ffffff 100%);
    mask-image: linear-gradient(to top, #ffffff00 0%, #ffffff 100%);
  }

  .CardHeader__title {
    /** 画像と同セルのため、画像全体に広がっている */
    /** この状態ではalign-*は効かないので、新たなgridにして位置を指定する */
    display: grid;
    justify-items: center;
    align-content: flex-end;
    padding: 0 1.25em 0.75em;
    margin: 0;
    color: black;
  }

  .CardBody {
    padding: 0 1em;
  }

  .CardBody__paragraph {
    margin: 0;
    /** 3行に収める */
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
    overflow: hidden;
  }

  .CardFooter {
    padding: 0 1em 1em;
    /** 下端に配置 */
    margin-top: auto;
    display: flex;
    justify-content: space-between;
    gap: 1em;
  }

  .IconText {
    display: flex;
    gap: 0.25em;
    /** アイコンとテキストの高さを揃える */
    align-items: center;
  }

  .IconText__icon {
    /** テキストが長くなったときに、アイコンが縮まないようにする */
    flex-shrink: 0;
    /** 縦中央配置 */
    display: flex;
  }

  .Avatars {
    display: grid;
    list-style: none;
    padding: 0 10px 0 0;
    grid-template-columns: repeat(4, minmax(auto, 40px));
    counter-reset: over 0;
    margin: 0;
  }

  .Avatar:first-child:nth-last-child(3) {
    grid-column-end: -3;
  }

  .Avatar:first-child:nth-last-child(2),
  .Avatar:first-child:nth-last-child(-n + 3) ~ .Avatar:has(~ .Avatar:last-child) {
    grid-column-end: -2;
  }

  .Avatar:first-child:nth-last-child(1),
  .Avatar:first-child:nth-last-child(-n + 3) ~ .Avatar:last-child {
    grid-column-end: -1;
  }

  .Avatar {
    aspect-ratio: 1;
    margin-right: -10px;
    overflow: hidden;
    position: relative;
    border: 2px solid white;
    border-radius: 50%;
  }

  .Avatar:nth-child(n + 4) {
    counter-increment: over 1;
  }

  /** 全要素に対するカウンタのインクリメントが終わったlast-childで値を表示 */
  .Avatar:first-child:nth-last-child(n + 5) ~ .Avatar:last-child .Avatar__thumb {
    visibility: hidden;
  }
  .Avatar:first-child:nth-last-child(n + 5) ~ .Avatar:last-child::after {
    content: "+" counter(over);
    display: grid;
    place-content: center;
    width: 100%;
    height: 100%;
    position: absolute;
    inset: 0;
    background: #f675a8;
  }

  /** 4つ目以降は省略（last-childはカウンタ表示用に残しておく） */
  .Avatar:nth-child(n + 4):not(:last-child) {
    /** 描画をスキップ */
    /** display: none;とは異なり、カウンタは機能する */
    content-visibility: hidden;
    /** 支援技術から隠す */
    visibility: hidden;
    /** 見えなくする */
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    height: 1px;
    width: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
  }

  .Avatar__thumb {
    width: 100%;
  }

  .PublishDate {
    white-space: nowrap;
    font-size: 0.8rem;
  }

  .PublishDate__icon {
    width: 1.75em;
    height: 1.75em;
  }

  @container (width > 40vw) and (width > 540px) {
    .CardTag {
      display: none;
    }
    .Card {
      display: grid;
      column-gap: 0;
    }
    .CardHeader {
      display: contents;
    }
    .CardHeader__image {
      grid-column: 1;
      grid-row: 1 / 4;
      -webkit-mask-image: none;
      mask-image: none;
      border-radius: var(--card-corner-radius) 0 0 var(--card-corner-radius);
      height: 100%;
      object-position: center center;
      opacity: 0.8;
    }
    .CardHeader__title {
      grid-column: 2;
      grid-row: 1;
      padding: 0.75em 1.25em;
    }
    .CardBody {
      grid-column: 2;
      grid-row: 2;
    }
    .CardFooter {
      grid-column: 2;
      grid-row: 3;
    }
  }

  @container (width > 90vw) and (width > 540px) {
    .CardTag {
      display: none;
    }
    .Card {
      display: grid;
    }
    .CardHeader {
      grid-row: 1 / 10;
      grid-column: 1;
      display: contents;
    }
    .CardHeader__image {
      grid-row: 1 / 10;
      grid-column: 1;
      filter: blur(2px);
      margin: -1px;
      object-position: top;
      -webkit-mask-image: linear-gradient(
        9deg,
        hsla(0, 0%, 35.29%, 0) 0%,
        hsla(0, 0%, 34.53%, 0.034375) 16.36%,
        hsla(0, 0%, 32.42%, 0.125) 33.34%,
        hsla(0, 0%, 29.18%, 0.253125) 50.1%,
        hsla(0, 0%, 24.96%, 0.4) 65.75%,
        hsla(0, 0%, 19.85%, 0.546875) 79.43%,
        hsla(0, 0%, 13.95%, 0.675) 90.28%,
        hsla(0, 0%, 7.32%, 0.765625) 97.43%,
        hsla(0, 0%, 0%, 0.8) 100%
      );
      mask-image: linear-gradient(
        9deg,
        hsla(0, 0%, 35.29%, 0) 0%,
        hsla(0, 0%, 34.53%, 0.034375) 16.36%,
        hsla(0, 0%, 32.42%, 0.125) 33.34%,
        hsla(0, 0%, 29.18%, 0.253125) 50.1%,
        hsla(0, 0%, 24.96%, 0.4) 65.75%,
        hsla(0, 0%, 19.85%, 0.546875) 79.43%,
        hsla(0, 0%, 13.95%, 0.675) 90.28%,
        hsla(0, 0%, 7.32%, 0.765625) 97.43%,
        hsla(0, 0%, 0%, 0.8) 100%
      );
      border-radius: var(--card-corner-radius);
      max-height: 95vh;
    }
    .CardHeader__title {
      grid-row: 5 / 6;
      grid-column: 1;
      font-size: 2em;
      padding: 0;
    }
    .CardBody {
      grid-row: 7 / 8;
      grid-column: 1;
      z-index: 2;
      width: 80%;
      justify-self: center;
    }
    .CardFooter {
      grid-row: 8 / 9;
      grid-column: 1;
      z-index: 2;
      width: 80%;
      justify-self: center;
      padding: 0;
    }
  }
</style>
